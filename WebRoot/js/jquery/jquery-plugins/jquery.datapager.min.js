/**
 * go data page for pageNo
 * @param pageNo
 * @param formId
 * @returns
 */
function goPage(pageNo, formId) {
	return $(window).goPage(pageNo, formId);
}
/**
 * go to page directly for pageNo
 * @param pageNo
 * @param currentPage
 * @param totalPages
 * @param event
 * @param formId
 * @returns
 */
function gotoPage(pageNo, currentPage, totalPages, event, formId) {
	return $(window).gotoPage(pageNo, currentPage, totalPages, event, formId);
}
/**
 * set data page size
 * @param size
 * @param formId
 * @returns
 */
function setPageSize(size, formId) {
	return $(window).setPageSize(size, formId);
}
/**
 * order data page
 * @param orderBy
 * @param formId
 * @param single
 * @returns
 */
function orderPage(orderBy, formId, single) {
	return $(window).orderPage(orderBy, null, single, null, formId);
}

function executeBySearchForm(options) {
	$(window).ajaxExecute(options);
	return false;
}
function _getNewContainer(container) {
	container = container||'.mainPanel';
	var $container = $(window.document.body).find(container).not('.dataPager');
	var len = $container.length;
	if(len>1) {
		$container.each(function() {
			var el = $(this);
			if(el.parent(':visible').length) {
				$container = el;
				return false;
			}
			return true;
		});
	}
	if($container.length==0) {
		alert('error:container not found!'+container+'-'+$container.length);
		return undefined;
	}
	return $container;
}
function updateDataPager() {
	$(window).trigger('resize.updatePage');
}
/**
 * data pager to search form (as jQuery plugin) 
 * require jQuery jQuery-Form jQuery-UI jQuery-MyUtils
 * @company Copyright ZSword(c) 2011 - 2011
 * @author JemiZhuu(周士淳)
 * @version 1.0
 * @since 2011-6-13
 */
(function($) {
			
$.extend($.fn, {
	/**
	 * check if element is scrollable.
	 */
	isScrollable: function() {
		if(this.length<1 || this.length>1) {
			window.console && console.warn( "no or to much element selected, can't check the scrollbar" );
		}
		var scrollable = this.scrollTop()>0 || this.scrollLeft()>0;
		if(!scrollable) {
			this.scrollTop(1).scrollLeft(1);
			scrollable = this.scrollTop()>0 || this.scrollLeft()>0;
			this.scrollTop(0).scrollLeft(0);
		}
		return scrollable;
	},
	/**
	 * set up a $.AjaxSearchForm to a search form.
	 */
	ajaxSearchForm: function(options) {
		// if nothing is selected, return nothing; can't chain anyway
		if (!this.length || !this.is('form')) {
			options && options.debug && window.console && console.warn( "no form selected, returning nothing" );
			return;
		}
		var key = 'ajaxSearchForm';
		var searchForm = $.data(this[0], key);
		if( searchForm ) {
			return this;
		}
		searchForm = new $.AjaxSearchForm(options, this[0]);
		$.data(this[0], key, searchForm);
		return this;
	},
	/**
	 * initialize data pager to search form
	 */
	dataPager: function( options ) {
		// if nothing is selected, return nothing; can't chain anyway
		if (!this.length) {
			options && options.debug && window.console && console.warn( "no element selected, can't init data pager, returning nothing" );
			return;
		}
		var element = this[0];
		// check if a DataPager for this window was already created
		var datapager = $.data(element, 'datapager');
		if ( datapager ) {
			return datapager;
		}
		datapager = new $.DataPager(options, this[0]);
		$.data(element, 'datapager', datapager);
		return datapager;
	},
	_getPager: function(container) {
		container = container || '.mainPanel:visible';
		var $container = $(window.document.body).find(container);
		if($container.length!=1) {
			alert('error:pageContainer not found!');
			return undefined;
		}
		return $.data($container[0], 'datapager');
	},
	/**
	 * initialize data pager
	 */
	initDataPager: function(options) {
		var containerId = options&&options.container;
		var container = _getNewContainer(containerId);
		if(container.length) {
			var pager = container.dataPager(options);
			pager.initDataPage();
			return pager;
		}
	},
	/**
	 * execute command by ajax
	 */
	ajaxExecute: function(options) {
		var pager = this._getPager();
		if(pager) {
			var settings = $.extend({}, options);
			if(!settings.url) {
				return pager;
			}
			pager.submitRestForm(settings)
			return pager;
		}
	},
	/**
	 * set a normal form to ajax form
	 */
	setupAjaxForm: function(formId, options) {
		var pager = this._getPager();
		if(pager) {
			return pager.setupAjaxForm(formId, options);
		}
	},
	/**
	 * initialize data list page
	 */
	initListPage: function(container) {
		var pager = this._getPager(container);
		if(pager) {
			return pager.initListPage();
		}
	},
	/**
	 * initialize data list page labels UI.
	 */
	initListLabels: function(container) {
		var pager = this._getPager(container);
		if(pager) {
			pager.initListLabels();
		}
	},
	/**
	 * initialize data input page
	 */
	initInputPage: function(options) {
		var pager = this._getPager();
		if(!pager) {
			if(pager==undefined) {
				return pager;
			}
			pager = pager.dataPager();			
		}
		return pager.initInputPage(options);
	},
	/**
	 * go data page for pageNo
	 */
	goPage: function(pageNo, formId) {
		var pager = this._getPager();
        if (pager) {
            return pager.search(formId, pageNo);
        }
	},
	/**
	 * go to data page directly for pageNo
	 */
	gotoPage: function(pageNo, currentPage, totalPages, event, formId) {
		var pager = this._getPager();
        if (pager) {
			return pager.search(formId, pageNo, currentPage, totalPages, event);
		}
	},
	/**
	 * order data page
	 */
	orderPage: function(orderBy, orderDir, single, current, formId) {
		var pager = this._getPager();
        if (pager) {		
			return pager.orderPage(orderBy, orderDir, single, current, formId);
		}
	},
	/**
	 * set data page size to search form
	 */
	setPageSize: function(size, formId) {
		var pager = this._getPager();
        if (pager) {
			return pager.setPageSize(size, formId);
		}
	},
	/**
	 * submit other action by search form
	 */
	submitPageForm: function(options) {
		var pager = this._getPager();
        if (pager) {		
			return pager.submitSearchForm(options);
		}
	}
});

// constructor for DataPager
$.DataPager = function( options, container ) {
	this.settings = $.extend( true, {}, $.DataPager.defaults, options );
	this._container = container;
	this._init();
};
// dataPager plugin constants
/** jQuery-UI Icons */
var REFRESH_ICON = {primary: 'ui-icon-refresh'};
var ADD_ICON = {primary: 'ui-icon-document'};
var SEARCH_ICON = {primary: 'ui-icon-search'};
var SUBMIT_ICON = {primary: 'ui-icon-disk'};
var RESET_ICON = {primary: 'ui-icon-arrowreturnthick-1-w'};
var TOOLBAR_ICON = {primary: 'ui-icon-wrench'};
var ORDER_NONE_ICON = {secondary: 'ui-icon-carat-2-n-s'};
var ORDER_ASC_ICON = {secondary: 'ui-icon-circle-arrow-s'};
var ORDER_DESC_ICON = {secondary: 'ui-icon-circle-arrow-n'};
var EDIT_ICON = {primary: 'ui-icon-pencil'};
var DELETE_ICON = {primary: 'ui-icon-trash'};
var dlg = null;
// extends DataPager Class
$.extend($.DataPager, {
	defaults: {
		//data search form id
		searchForm: '#searchForm',		
		//data list panel id
		listPanel: '#listPanel',
		//page no element id
		pageNoId: '#pageNo',
		//page size element id
		pageSizeId: '#pageSize',
		//order by element id
		orderById: '#orderBy',
		//order direction element id
		orderDirId: '#orderDir',
		//data input form id
		inputForm: '#inputForm',
		//data input panel id
		inputPanel: '#inputPanel',
		//search success call back
		callback: undefined,
		//delete data confim message
		deleteConfirmMsg: '确定要删除数据吗?',
		//reload search form delay millisecond
		reloadDelay: 1500,
		//whether is debug
		debug: false,
		inputPanelConfig: undefined
	},
	setDefaults: function(settings) {
		$.extend( $.DataPager.defaults, settings );
	},
	prototype: {
		/**
		 * initialize DataPager Object
		 */
		_init: function() {
			this.setOptions();
			this._mainPanel = $(this._container);
			var mainPanel = this._mainPanel;
			this._mainPanel.addClass('dataPager');
			var searchForm = mainPanel.find(this.searchForm);
			if(!searchForm.is('form')) {
				alert('error:searchForm not found!'+this.searchForm);
				return false;
			}
			this.listPanel = searchForm.attr('target')||this.listPanel;
			this._listPanel = mainPanel.find(this.listPanel);
			this._inputPanel = mainPanel.find(this.inputPanel);
			this._searchForm = searchForm;			
		},
		/**
		 * initialize data search page
		 */
		initDataPage: function() {
			this._initUI(this._mainPanel);
		},
		/**
		 * get data search form
		 */
		getSearchForm: function() {
			return this._searchForm;
		},
		/**
		 * set object properties
		 */
		setOptions: function(options) {
			$.extend(this, this.settings);
		},
		/**
		 * set a normal to a ajax form
		 */
		setupAjaxForm: function(formId, options) {			
			if(!formId) {
				alert('warning:formId is not set!');
				return -1;
			}
			var form = $(formId);
			if(!form.is('form')) {
				alert('error:form-'+formId+' is not a valid form!');
				return -1;
			}			
			form.ajaxSearchForm(options);
			return form;
		},
		/**
		 * initialize data search form
		 */
		_setupSearchForm: function(searchForm, options) {
			var _self = this;
			var callback = this.callback;
			var settings = {				
				target: this._listPanel,
				callback: callback
			};
			$.extend(settings, options);
			searchForm.ajaxSearchForm(settings);
		},
		/**
		 * submit data search form with AJAX and options.(if is search only, don`t using this method, using search())
		 */
		submitSearchForm: function(options) {
			var searchForm = (options && options.form)? options.form : this._searchForm[0];
			var settings = $.extend({
				target: this._listPanel
			}, options);
			return searchForm.submitSearchForm(settings);
		},
		/**
		 * submit restful operation form
		 */
		submitRestForm: function(options) {
			return this.submitSearchForm(options);
		},		
		/**
		 * initialize page UI elements
		 */
		_initUI: function(mainPanel) {			
			var _self = this,
				listPanel = this._listPanel;
			function resizeHandler() {
				if(!mainPanel.is(':visible')) {
					return;
				}
				var wndHeight = $(window).height()-7;
				var listTop = parseInt(listPanel.offset().top);
				var maxHeight = wndHeight-listTop;
				listPanel.height('auto');
				var listHeight = listPanel.height();
				if(listHeight<=0) {
					listHeight = maxHeight+2;
				}				
				if(maxHeight<listHeight) {
					listPanel.height(maxHeight);
				}
			};			
			this._setupSearchForm(this._searchForm, {
				beforeSubmit: function() {
					$.fn.toggleMaskLoading();
					_self._listPanel.hide();
				},
				complete: function() {
					$.fn.toggleMaskLoading();
					_self._listPanel.show();
					resizeHandler();
				}
			});
			mainPanel.find('#refresh-button').button({
				icons: REFRESH_ICON
			}).click(function() {
				searchForm[0].reset();
				searchForm.submit();
			});
			mainPanel.find('#toolbar-button').button({
				icons: TOOLBAR_ICON
			}).click(function() {
				$(this).parent().next('#toolbarPanel').toggle('blind', function() {
					updateDataPager();
				});				
			});
			var searchForm = this._searchForm;
			searchForm.find('#reset-button').button({
				icons: RESET_ICON
			});
			searchForm.find('#search-button').button({
				icons: SEARCH_ICON
			});
			searchForm.find('#add-button').button({
				icons: ADD_ICON
			}).click(function() {
				var command = this.value;
				if(!command || command=='#') {
					return false;
				}
				_self.showInputPanel(command);
				return false;
			});
			searchForm.find('.edit-button').button({
				icons: EDIT_ICON
			}).click(function() {
				var command = this.href||this.value;
				if(!command || command=='#') {
					return false;
				}
				_self.showInputPanel(command);
				return false;				
			});
			$(window).bind('resize.updatePage', resizeHandler);
			mainPanel.show('blind', undefined, 500, function() {				
				_self._searchForm.submit();
			});					
		},
		updateDataPage: function() {
			$(window).trigger('resize.updatePage');
		},
		/**
		 * initialize data list page
		 */
		initListPage: function() {
			var _self = this, 
				mainPanel = this._mainPanel;
			var listPanel = this._listPanel;
			listPanel.show();
			this.initListLabels();
			function doEdit() {
				var command = this.href||this.value;
				if(!command || command=='#') {
					return false;
				}
				_self.showInputPanel(command);
				return false;
			}
			listPanel.find('.edit-button').button({
				icons: EDIT_ICON
			}).click(doEdit);
			listPanel.find('.show-button').button().click(doEdit);			
			var deleteConfirmMsg = this.deleteConfirmMsg;
			function doAjaxButtonOpt() {
				var command = this.value||this.href;
				if(!command || command=='#') {
					return false;
				}
				var target = $(this).attr('target')||undefined;
				_self.submitRestForm({'url': command, 'target':target});
				return false;
			}
			listPanel.find('.ajax-button').click(doAjaxButtonOpt).button();
			listPanel.find('.delete-button').button({
				icons: DELETE_ICON
			}).unbind('click').click(function() {
				if(confirm(deleteConfirmMsg)) {
					doAjaxButtonOpt.call(this);
				}				
				return false;
			});
		},
		initListLabels: function() {
			$('div.pagerUI:visible').buttonset();
			$('.ordernone-label:visible').button({icons: ORDER_NONE_ICON});
			$('.orderasc-label:visible').button({icons: ORDER_ASC_ICON});
			$('.orderdesc-label:visible').button({icons: ORDER_DESC_ICON});	
		},
		/**
		 * search data by search form
		 */
		search: function(formId, pageNo, currentPage, totalPages, event) {
			var formObj = (!formId)? this._searchForm : $(formId);
			return formObj[0].search(pageNo, currentPage, totalPages, event);
		},
		/**
		 * search and order data by search form(multi fields)
		 */
		orderPage: function(orderBy, orderDir, single, current, formId) {
			var formObj = (!formId)? this._searchForm : $(formId);
			return formObj[0].orderListPage(orderBy, orderDir, single, current);
		},
		/**
		 * set data page size and search by search form
		 */
		setPageSize: function(size, formId) {
			var formObj = (!formId)? this._searchForm : $(formId);
			return formObj[0].setListPageSize(size);
		},		
		/**
		 * initialize data input page
		 */
		initInputPage: function(options) {
			var inputForm = $('#inputForm');
			inputForm.find('#submit-button').button({icons:SUBMIT_ICON});
			inputForm.find('#reset-button').button({icons: RESET_ICON});
			var settings = $.extend(true, {}, options);
			this.setupInputForm(settings);
		},
		/**  
		 * initialize data input form
		 */
		setupInputForm: function(options) {
			var _self = this;
			var formObj = $(this.inputForm);
			if(!formObj.length || !formObj.is('form')) {
				return;
			}
			var inputForm = formObj[0];
			var saveAction = options.saveAction;
			if(saveAction) {
				inputForm.action = saveAction;
			}
			saveAction = inputForm.action;
			this._inputForm = inputForm;
			var _self = this;
			var ajaxSettings = $.extend(null, options.ajax);
			var settings = {
				submitHandler:  function() {
					if(!saveAction || saveAction=='#') {
						alert('InputForm Action无效!');
						return false;
					}
					return _self.submitInputForm(formObj, ajaxSettings);
				}
			};
			settings = $.extend(settings, options.validate);
			formObj.validate(settings);
		},
		/**
		 * submit input form
		 */
		submitInputForm: function(formObj, settings) {
			var _self = this;
			var reload = settings.reload;
			var inputDialog = formObj.parent();
			var searchForm = this._searchForm;
			var reloadDelay = this.reloadDelay;
			var ajaxSettings = $.extend({
					beforeSubmit: function() {
						return _self.beforeInputSubmit();
					},
					success: function(data,textStatus) {
						if(data.indexOf('success')!=0) {
							_self.showInputMessage('');
							_self.showInputErrorMessage(data);
							formObj.show('explode');
						} else {
							_self.showInputMessage('操作成功!');
							if(reload instanceof Function) {
								reload.call(_self);
							} else {								
								setTimeout(function() {
									if(inputDialog) {
										inputDialog.dialog('close');
									}
									if (typeof reload=='string') {
										_self.submitRestForm({'url': reload});
									} else {
										if(searchForm) {
											_self.search();
										}
									}
								}, reloadDelay);
							}
						}
					},
					complete: $.fn.toggleMaskLoading,
					error: $.fn.showAjaxError    					
			}, settings);
			formObj.hide('explode', function() {
				formObj.ajaxSubmit(ajaxSettings);
			});
			return false;
		},
		/**
		 * before submit input form 
		 */
		beforeInputSubmit: function() {
			$.fn.toggleMaskLoading();
			this.showInputMessage('提交中,请稍候...');
			this.showInputErrorMessage('');
			return true;
		},
		/**
		 * setup data input dialog
		 */
		showInputDialog: function(options) {
			var dialog = this._inputPanel;
			var inputDlgConfig = this.settings.inputDlgConfig;
			var wndHeight = 0;			
			if(dialog.dialog('isOpen')==true) {
				return dialog;
			} else if(dialog.dialog('isOpen')==false) {				
				dialog.dialog('open');
				$(window).trigger('resize.resizeInputDialog');
				return dialog;
			}
			var showEffect = 'slid';
			var settings = {
					closable: true,
					autoOpen: false, 
					modal:true, 
					show:showEffect,
					hide:showEffect,
					beforeClose : function(ui) {
						$(this).empty();
					},					
					position:['center', 0]
			};
			settings = $.extend(settings, options, inputDlgConfig);
			dialog.makeDialog(settings);
			$(window).unbind('resize.resizeInputDialog').bind('resize.resizeInputDialog', function(){
				if(dialog.is(':visible')) {
					wndHeight = $(this).height()-10;
					dialog.dialog('option', 'height','auto');
					var dialogHeight = dialog.parent().height();
					if(dialogHeight>wndHeight) {						
						dialog.dialog('option', 'height', wndHeight);
						var scrollWidth = dialog.get(0).scrollWidth;
						var dlgWidth = dialog.width();
						if(scrollWidth>dlgWidth) {
							dialog.width(scrollWidth);
						}
					}
				}
			});
			this._inputDialog = dialog;
			return this.showInputDialog(dialog);
		},
		emptyInputPanel: function() {
			var inputPanel = $('#'+this.inputPanelId);
			if(!inputPanel.length) {
				return;
			}
			inputPanel.empty();
		},
		/**
		 * show data input form dialog
		 */
		showInputPanel: function(action) {			
			var inputPanel = this._inputPanel;
			var _self = this;
			this.submitRestForm({
				'url':action, 
				'target':inputPanel[0],
				'callback': function(){
					_self.showInputDialog();
				}
			});
			return false;
		},		
		/**
		 * show operation success message
		 */
		showInputMessage: function(msg) {
			var info = $(this.inputForm).parent().children("#message");
			if(info) {
				info.html(msg);
			}	
		},
		/**
		 * show operation error message
		 */
		showInputErrorMessage: function(msg) {	
			var info = $(this.inputForm).parent().children("#errorMessage");
			if(info) {
				info.html(msg);
			}	
		},
		/**
		 * whether key pressed is a number key 
		 */
		isNumberKey: function(keyCode) {
			var minCode = "0".charCodeAt(0);
			var maxCode = "9".charCodeAt(0);
			return keyCode>=minCode && keyCode<=maxCode;
		}
	}
});

$.AjaxSearchForm = function( options, form ) {
	this.settings = $.extend( true, undefined, $.AjaxSearchForm.defaults, options);
	this.init(form);
}
/** AjaxSearchForm constants */
var LIST_PANEL = '#listPanel';

$.extend($.AjaxSearchForm, {
	defaults: {
		//page no element id
		pageNoId: 'pageNo',
		//page size element id
		pageSizeId: 'pageSize',
		//order by element id
		orderById: 'orderBy',
		//order direction element id
		orderDirId: 'orderDir',
		target: undefined,
		callback: undefined
	},
	setDefaults: function(settings) {
		$.extend( $.AjaxSearchForm.defaults, settings );
	},
	prototype: {
		/**
		 * initialize DataPager Object
		 */
		init: function(form) {
			this.setOptions();
			var _self = this;
			var op = this.settings;
			var searchForm = $(form);
			if(!searchForm.is('form')) {
				return;
			}
			_self.target = _self.target||form.target;
			var callback = this.callback;
			$.extend(form, this);
			var submitSettings = $.extend({
				target: _self.target,
				callback: callback
			}, op);
			submitSettings = this.buildAjaxSettings(submitSettings);
			searchForm.submit(function(event) {
				searchForm.ajaxSubmit(submitSettings);
				return false;
			});
		},
		/**
		 * set object properties
		 */
		setOptions: function(options) {
			$.extend(true, this.settings, options);
			$.extend(this, this.settings);
		},
		buildAjaxSettings: function(options) {
			var settings = {
				beforeSubmit: $.fn.toggleMaskLoading,
				success: function() {
					var callback = settings.callback;
					if(callback) {
						callback.call();
					}
				}, 
				error: $.fn.showAjaxError,
				complete: $.fn.toggleMaskLoading
			};
			var settings = $.extend(settings, options);
			return settings;
		},
		/**
		 * submit data search form with AJAX and options.(if is search only, don`t using this method, using search())
		 */
		submitSearchForm: function(options) {
			var searchForm = this;
			var settings = this.buildAjaxSettings(options);
			$(searchForm).ajaxSubmit(settings);			
		},
		/**
		 * submit restful operation form
		 */
		submitRestForm: function(options) {
			return this.submitSearchForm(options);
		},
		/**
		 * search data by search form
		 */
		search: function(pageNo, currentPage, totalPages, event) {
			var formObj = $(this);
			//keyCode:13-enter
			if(event && event.keyCode && event.keyCode!=13) {					
				var keyCode = parseInt(event.keyCode);
				//keyCode:8-backspace, 46-delete
				return keyCode==8 || keyCode==46 || this.isNumberKey(keyCode);
			}
			var noObj = formObj.children(':hidden#'+this.pageNoId);
			if(!pageNo) {pageNo = noObj.val();}
			if(!pageNo) {pageNo = 1;}
			pageNo=parseInt(pageNo);
			if(isNaN(pageNo)) {return false;}
			if(currentPage) {
				currentPage=parseInt(currentPage);
				if(pageNo==currentPage) {return false;}
			}
			if(totalPages) {
				totalPages=parseInt(totalPages);
				if(pageNo>totalPages) {pageNo=totalPages;}
			}
			if(pageNo<1) {pageNo=1;}
			noObj.val(pageNo);				
			formObj.submit();
			return false;
		},
		/**
		 * search and order data by search form(single field)
		 */
		orderListPageSingle: function(orderBy, orderDir, current) {
			if(!orderBy) {return false;}
			var formObj = $(this);
			var byObj = formObj.children(':hidden#'+this.orderById);
			var allBy = byObj.val();
			var byVal = byObj.val();
			var dirObj = formObj.children(':hidden#'+this.orderDirId);
			var dirVal = dirObj.val();
			if(orderBy==byVal) {
				if(!orderDir) {orderDir = (dirVal=='asc')? 'desc' : 'asc';}
			} else {
				byObj.val(orderBy);
				if(!orderDir) {orderDir='asc';}
			}
			dirObj.val(orderDir);
			if(current) {
				return this.search();
			} else {
				return this.search(1);
			}
		},
		/**
		 * search and order data by search form(multi fields)
		 */
		orderListPage: function(orderBy, orderDir, single, current) {
			if(single) {
				return this.orderListPageSingle(orderBy, orderDir, current);		
			}
			if(!orderBy) {return false;}
			var formObj = $(this);
			var byObj = formObj.children(':hidden#'+this.orderById);
			var allBy = byObj.val();
			if(!allBy) {allBy="";}
			var dirObj = formObj.children(':hidden#'+this.orderDirId);
			var allDir = dirObj.val();
			if(!allDir) {allDir="";}
			var flag = '┢';
			var searchBy = allBy.replace(orderBy, flag).replace(/[^,┢]/g, "");
			var index = searchBy.indexOf(flag);
			if(index==-1) {
				if(allBy!="") {allBy+=',';}
				allBy+=orderBy;
				if(!orderDir) {orderDir='asc';}
				if(allDir!="") {allDir+=',';}
				allDir+=orderDir;
				byObj.val(allBy);				
				dirObj.val(allDir);
				if(this.debug) {
					alert(allBy+'\n'+allDir);
				}
			} else {
				var byArray = allBy.split(',');					
				var dirArray = allDir.split(',');
				if(!orderDir) {
					var dir = dirArray[index];
					dirArray[index] = (dir=='asc')? 'desc' : 'asc';
				} else {
					dirArray[index] = orderDir;
				}
				allDir = dirArray.join(',');
				dirObj.val(allDir);
				if(this.debug) {
					alert(allBy+'\n'+allDir);
				}
			}
			if(current==true) {
				return this.search();
			} else {
				return this.search(1);
			}
		},
		/**
		 * set data page size and search by search form
		 */
		setListPageSize: function(size) {
			if(!size) {return false;}
			size = parseInt(size);
			if(isNaN(size)) {return false;}
			var formObj = $(this);
			formObj.children(':hidden#'+this.pageSizeId).val(size);
			return this.search(1);
		}		
	}
});

})(jQuery);
/**
 * Application UI base on Operamasks-UI
 * @company Copyright ZSword(c) 2011 - 2011
 * @author JemiZhuu(周士淳)
 * @version 1.0
 * @since 2012-4-13 
 */
(function() {

/**
 * extend manager functions
 */
$.fn.extend({
	_getContainer: function(container) {
		container = container||'.pager';
		var $container = $(container);
		if(!$container.length) {
			alert('error:container not found!'+container);
			return undefined;
		}
		return $container;
	},
	initAppPagerUI: function(options) {
		var $container = this._getContainer();
		if($container.length) {
			$container.removeClass('pager').addClass('pagerUI');
			return $container._applicationUI(options).initPage();
		}
	},
	_applicationUI: function(options) {
		if (!this.length) {
			options && options.debug && window.console && console.warn( "nothing selected, can't to manager, returning nothing" );
		}
		var element = this[0];
		var $ui = $.data(element, 'managerUI');
		if($ui) {			
			return $ui;
		}
		$ui = new $.ApplicationOmUI(options, element);
		$.data(element, 'managerUI', $ui);			
		return $ui;
	}
});
/**
 * ManagerOmUi class
 */
$.ApplicationOmUI = function(options, element) {
	this.settings = $.extend(true, undefined, $.ApplicationOmUI.defaults, options);
	this._container = element;
	this.$gridClass = this.settings.$gridClass;
	this._init();
};
$.extend($.ApplicationOmUI, {
	defaults: {
		mainPanel: '#mainPanel',
		refreshButton: '#refresh-button',
		toolbarButton: '#toolbar-button',
		toolbarPanel: '#toolbarPanel',
		showPanel: '#dataPanel'
	},
	prototype: {
		_init: function() {
		},
		initPage: function() {
			var $self = this,
				op = this.settings,
				$container = $(this._container);
			var $mainPanel = $container.find(op.mainPanel);
			if(!$mainPanel.length) {
				alert('error:mainPanel not found!'+op.mainPanel);
				return false;
			}
			var $toolbarPanel = $mainPanel.find(op.toolbarPanel);
			if(!$toolbarPanel.length) {
				alert('error:toolbarPanel not found!'+op.toolbarPanel);
				return false;				
			}
			$mainPanel.find(op.toolbarButton).click(function() {
				$toolbarPanel.toggle('blind');
				return false;
			});
			$mainPanel.find(op.refreshButton).click(function() {
			});
			$mainPanel.find('.ajaxui-button').click(function() {
				var command = this.href||this.value;
				if(!command || command=='#') {
					return false;
				}
				var target = this.target||op.showPanel;
				$self.executeAjaxCommand({
					url: command,
					target:target,
					success: function(data, status, request) {
					}
				});				
			});
			$mainPanel.find('.ajax-button').click(function() {
				if(this.title) {
					if(!confirm(this.title)) {
						return false;
					}
				}
				var command = this.href||this.value;
				if(!command || command=='#') {
					alert('error:command is invalid!'+command);
					return false;
				}
				var $this = $(this);
				$this.fadeOut();
				$self.executeAjaxCommand({
					url: command,
					success: function(data, status, request) {
						$editPanel.trigger($self.$gridClass.defaults.SaveDataSuccess, [this, data, status, request]);
					},
					complete: function() {
						$this.fadeIn();
					}
				});
				return false;
			});
			$mainPanel.show('blind');
		},
		executeAjaxCommand: function(options) {
			var commandForm = this._commandForm;
			if(!commandForm) {
				commandForm = $('<form method="post"></form>');
				this._commandForm = commandForm;
			}
			commandForm.ajaxSubmit(options);
			return false;
		}
	}
});

})(jQuery);
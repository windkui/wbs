/**
 * Data Manager UI base on Operamasks-UI
 * @company Copyright ZSword(c) 2011 - 2011
 * @author JemiZhuu(周士淳)
 * @version 1.0
 * @since 2012-4-13 
 */
(function() {

$.isString = $.isString||function(obj) {
	return $.type(obj)=='string';
};
	
var aboutPanel = $('#aboutPanel').omDialog({
	width: 450,
	height: 'auto',
	show: 'fade',
	hide: 'fade',
	modal: true,
	autoOpen: false,
	resizable: false
});
/**
 * initialize system menu
 * @returns
 */
function initSystemMenu() {
	function initSubMenu(menuId) {
		$(menuId).omMenu({
			width: 150,
			minWidth: 150,
			maxWidth: 300,
	        onSelect: function(item,event){
	            var menu = event.target;
	            var menuFn = menu.onclick;
	            if(!menuFn) {
	            	menu = $(menu).parent('a')[0];
	            	if(!menu) {
	            		return false;
	            	}
	            	menuFn = menu.onclick;            	
	            }
	            if(menuFn) {
	            	menuFn.call();
	            }
	            this.hide();
	            return false;
	        }
	    });			
	}
	var mainMenu = document.getElementById('mainMenu');
	$('#mainMenu > li >.topMenu').click(function() {
		var subId = this.id.replace("menu-", "#sub-");
		var subMenu = $(subId);
		if(typeof subMenu.omMenu('option','contextMenu')=='object') {
			initSubMenu(subId);
		}
		subMenu.omMenu('show', this);
		return false;
	});		
}
/**
 * initialize system tabs
 * @returns
 */
function initSystemTabs() {
	var $tabContainer = $('#mainContainer');
	$tabContainer.omTabs({
    	tabWidth: 'auto',
    	lazyLoad: true,
    	tabMenu: true,
        closable : true
	});
	$('#mainTabs').sortable({ axis: "x" });
}

/**
 * extend window functions
 */
$.extend(window, {
	showAbout: function() {
		aboutPanel.omDialog('open');		
	},
	executeCommandByUrl: function(url) {
		var menus = $('#mainMenu').find('.menuItem');
		menus.each(function() {
			if(this.rel==url) {
				this.click();
				return false;
			}
		});
	},
	executeCommand: function(tabId, title, command) {
		if(!command || command=='#' || command.indexOf('javascript:')==0) {
			return false;
		}		
		var $container = $('#mainContainer');	
		var curIndex = $container.omTabs('getAlter', tabId);
		if(curIndex!=null) {
			$container.omTabs('reload', curIndex, command);
			$container.omTabs('activate', curIndex);
			return false;
		}
		$container.omTabs('add', {
			tabId: tabId,
			title: title,
			url: command,
        	onError : function(xmlHttpRequest, textStatus, errorThrown){
        		this.html(xmlHttpRequest.responseText);
        	}
		}).omTabs('activate', tabId);
		return false;
	},	
	uiRenderEmailCol: function(value) {
		return $.omUI.omCrudGrid.renderEmailCol(value);
	},
	parseDateStr: function(dateStr) {
		dateStr = dateStr.replace(/-/g,"/").replace('T', ' ');
		return new Date(dateStr);
	},
	uiRenderDateCol: function(value) {
		var date = this.parseDateStr(value);
		if(isNaN(date)) {
			return value;
		}
		return date.toLocaleString();
	},
	uiRenderDateCNCol: function(val) {
		return uiRenderFormatDateCol(val, 'yy年mm月dd日');
	},	
	uiRenderFormatDateCol: function(value, displayFormat) {
		displayFormat = $.isString(displayFormat)? displayFormat : 'yy年mm月dd日 H:i:s';
		var date = this.parseDateStr(value);
		if(isNaN(date)) {
			return value;
		}	
		return $.omCalendar.formatDate(date, displayFormat);		
	},
	uiRenderOptCol: function(id, options) {
		return $.omUI.omCrudGrid.renderOptCol(id, options);
	},
	uiRenderTemperatureCol: function(value) {
		return value+' ℃';
	},
	rendererNumber: function(numb) {
		return numb;
	}
});
/**
 * extend manager functions
 */
$.fn.extend({
	/**
	 * initialize administrator container
	 * @returns
	 */
	initAdmin: function(options) {
		$.datepicker.setDefaults({'dateFormat':'yy-mm-dd'});
		var settings = {
			containerId: '#container'	
		};
		options = $.extend({
			title: '<div align="center"><b>欢迎使用"<span class="message">信息化研发平台</span>"</b></div>'
		}, options);
		var $container = $(settings.containerId);
		$container.fixOmBorderLayout({
			fit: true,
			spacing: 1,
			panels: [{
	   	        id:"north-panel",
	   	        title: options.title,
	   	        region:"north",
	   	        collapsible:true
	   	    },{
	   	        id:"center-panel",
	   	     	header:false,
	   	        region:"center"
	   	    }]
		});
		//initialize menus UI
		initSystemMenu();
		//initialize tabs UI
	    initSystemTabs();
		$('#centerContainer').show('blin');
	},
	_getManagerContainer: function(container) {
		container = container||'.pager';
		var $container = $(container);
		if(!$container.length) {
			alert('error:container not found!'+container);
			return undefined;
		}
		return $container;
	},
	initInputPageUI: function(options) {
		var settings = {
			saveAction: undefined,
			validations: undefined
		};
		var inputForm = options.inputForm||'#inputForm';
		var $inputForm = $(inputForm);
		if(!$inputForm.is('form')) {
			alert('error:inputForm not found!'+inputForm);
			return false;
		}
		$.extend(settings, options);
		if(settings.saveAction) {
			$inputForm.attr('action', settings.saveAction);
		}
		this._prepareEditForm($inputForm[0], settings);
	},
	_prepareEditForm: function(inputForm, validations) {
		$.omUI.omCrudGrid.prepareEditForm(inputForm, validations);
	},
	initDataPagerUI: function(options) {
		var $container = this._getManagerContainer();
		if($container.length) {
			$container.removeClass('pager').addClass('pagerUI');
			var pager = $container._managerUI(options);
			pager.initListPage();
			return pager; 
		}
	},
	_managerUI: function(options) {
		if (!this.length) {
			options && options.debug && window.console && console.warn( "nothing selected, can't to manager, returning nothing" );
		}
		var element = this[0];
		var $ui = $.data(element, 'managerUI');
		if($ui) {			
			return $ui;
		}
		$ui = new $.ManagerOmUI(options, element);
		$.data(element, 'managerUI', $ui);			
		return $ui;
	}
});
var pre = null;
/**
 * ManagerOmUi class
 */
$.ManagerOmUI = function(options, element) {
	this.settings = $.extend(true, undefined, $.ManagerOmUI.defaults, options);
	this._container = element;
	this.$gridClass = this.settings.$gridClass;
	this._init();
};
$.extend($.ManagerOmUI, {
	defaults: {
		$gridClass: $.omUI.omCrudGrid,
		mainPanel: '#mainPanel',
		refreshButton: '#refresh-button',
		toolbarButton: '#toolbar-button',
		toolbarPanel: '#toolbarPanel',
		addButton: '#add-button',
		crudGrid: '#listDataTable',
		editDlgConfig: undefined,
		zoom: true,
		gridConfig: {
			beforeLoad: undefined,
	        limit :20,
	        width: '90%',
	        height: 350,
	        editPanel: '#inputPanel',
	        preProcess: function(data) {
	        	if(data.result) {
		        	data.rows = data.result;
		        	data.total = data.totalCount;
		        	data.from = data.frist;
		        	data.to = data.from+data.pageSize;
		        	data.limit = data.pageSize;
	        	}
	        	return data;
	        },
	       	limitParam: 'page.pageSize',
	       	pageNoParam: 'page.pageNo',
	        dataForm: '#searchForm'
		}
	},
	prototype: {
		_init: function() {
			this.$gridClass.setDefaultOptions({
				jsonExt:'.sjson'
			});
		},
		initListPage: function() {
			var $self = this,
				op = this.settings,
				$container = $(this._container);
			var $mainPanel = $container.find(op.mainPanel);
			if(!$mainPanel.length) {
				alert('error:mainPanel not found!'+op.mainPanel);
				return false;
			}
			$mainPanel.hide();
			var $toolbarPanel = $mainPanel.find(op.toolbarPanel);
			if(!$toolbarPanel.length) {
				alert('error:toolbarPanel not found!'+op.toolbarPanel);
				return false;				
			}
			$mainPanel.find(op.toolbarButton).click(function() {
				$toolbarPanel.toggle('blin');
				return false;
			});
			var crudGrid = $mainPanel.find(op.crudGrid);
			if(!crudGrid.length) {
				alert('error:crudGrid not found!'+op.crudGrid);
				return false;
			}
			var crudGrid = crudGrid[0];
			var gridConfig = op.gridConfig;
			var $searchForm = $toolbarPanel.find(gridConfig.dataForm);
			if(!$searchForm.is('form')) {
				alert('error:gridConfig.dataForm not found!'+gridConfig.dataForm);
				return false;
			}
			this._searchForm = $searchForm;			
			gridConfig.dataForm = $searchForm[0];
			var $editPanel = $mainPanel.find(gridConfig.editPanel);
			$mainPanel.find(op.refreshButton).click(function() {
				$searchForm[0].reset();
				$editPanel.empty();
				$searchForm.submit();
			});			
			gridConfig.editPanel = $editPanel[0];
			function doAjaxUiBtn() {
				var command = this.href||this.value;
				if(!command || command=='#') {
					return false;
				}
				var el = $(this);
				var target = el.attr('target')||gridConfig.editPanel;
				$self.executeAjaxCommand({
					url: command,
					target:target,
					success: function(data, status, request) {
						if(target==$editPanel[0]) {
							$editPanel.trigger($self.$gridClass.defaults.LoadedSuccess, [this, data, status, request]);
						} else {
							$(target).show();
						}
					}
				});	
				return false;
			}
			$mainPanel.find('.ajaxui-button').click(doAjaxUiBtn);
			function doAjaxBtn() {
				if(this.title) {
					if(!confirm(this.title)) {
						return false;
					}
				}
				var command = this.href||this.value;
				if(!command || command=='#') {
					alert('error:command is invalid!'+command);
					return false;
				}				
				var $this = $(this);
				$this.fadeOut();
				$self.executeAjaxCommand({
					url: command,
					success: function(data, status, request) {
						$editPanel.trigger($self.$gridClass.defaults.SaveDataSuccess, [this, data, status, request]);
					},
					complete: function() {
						$this.fadeIn();
					}
				});
				return false;
			}
			$mainPanel.find('.ajax-button').click(doAjaxBtn);
			$mainPanel.show('blin');
			var $grid = this._initCrudGrid(crudGrid, gridConfig);			
			$mainPanel.find(op.addButton).click(function() {
				$grid.omCrudGrid('editOpt');
				return false;
			});
		},
		_initCrudGrid: function(gridId, settings) {
			if(!settings.colModel) {
				alert('error:grid.colModel not config!');
				return false;
			}
			var listUrl = $(settings.dataForm).attr('action');
			if(listUrl) {
				var optUrls = {
					editUrl: listUrl.replace('!list.action', '!input.action?id={id}'),
					deleteUrl: listUrl.replace('!list.action', '!delete.action?id={id}')
				};
				settings = $.extend(optUrls, settings);
			}
			var $grid = $(gridId);
			if(this.settings.zoom) {			
				$grid.zoomTarget();
			}
			var $grid = $grid.omCrudGrid(settings);
			var editDlgConfig = this.settings.editDlgConfig;
			$grid.omCrudGrid('bindEditPanel', editDlgConfig);
			return $grid;
		},		
		executeAjaxCommand: function(options) {			
			var commandForm = options.cmmandForm || this._commandForm;
			if(!commandForm) {
				commandForm = $('<form method="post"></form>');
				this._commandForm = commandForm;
			}
			commandForm.ajaxSubmit(options);
			return false;
		},
		executeCommandBySearchForm: function(options) {
			options.commandForm = this._searchForm;
			return this.executeAjaxCommand(options);
		}
	}
});

})(jQuery);